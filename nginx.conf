env VERSION;
error_log stderr debug;

events {
    worker_connections 1024;
}

http {
    log_format main '$http_x_forwarded_for - $remote_user [$time_local] '
                    '"$request_method $scheme://$host$request_uri $server_protocol" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" $request_time';
    access_log /dev/stdout main;
    include mime.types;

    server {
        set_by_lua $version 'return os.getenv("VERSION")';
        listen 8080;
        listen [::]:8080 ipv6only=on;
        location / {
            echo_duplicate 1 $echo_client_request_headers;
            echo "\r";
            echo_read_request_body;
            echo $request_body;
            echo "hostname: $hostname";
            echo "remote_addr: $remote_addr";
            echo "version: $version";
            echo "elapsed: $echo_timer_elapsed";
        }
        location /404 {
            echo_status 404;
            echo "Not Found";
        }
        location /503 {
            echo_status 503;
            echo "Service Unavailable";
        }              
        location /system {
            content_by_lua_block {
                local shell = require("resty.shell")
                local timeout = 1000
                local max_size = 4096
                local ok, stdout, stderr, reason, status = shell.run([[uname -a]], nil, timeout, max_size)
                if not ok then
                    return stderr
                end
                ngx.header.content_type = "text/plain"
                ngx.say(stdout)
            }
        }
        location /ip {
            content_by_lua_block {
                local shell = require("resty.shell")
                local timeout = 5000
                local max_size = 128*1024
                local ok, stdout, stderr, reason, status = shell.run([[curl ifconfig.co/json]], nil, timeout, max_size)
                if not ok then
                    return stderr
                end
                ngx.header.content_type = "application/json"
                ngx.say(stdout)
            }
        }      
    }
}
